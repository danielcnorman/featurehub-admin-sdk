=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for FeaturehubAdminSdk::GroupServiceApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GroupServiceApi' do
  before do
    # run before each test
    @api_instance = FeaturehubAdminSdk::GroupServiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupServiceApi' do
    it 'should create an instance of GroupServiceApi' do
      expect(@api_instance).to be_instance_of(FeaturehubAdminSdk::GroupServiceApi)
    end
  end

  # unit tests for add_person_to_group
  # Add a person to a group
  # @param gid The id of the group to find
  # @param p_id The id of the person to add/delete
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_members include people in each group
  # @return [Group]
  describe 'add_person_to_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_group
  # Create a new group
  # @param id The id of the portfolio to find
  # @param group 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_people include people in each group
  # @return [Group]
  describe 'create_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_group
  # Delete a group
  # @param gid The id of the group to find
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_members include people in each group
  # @option opts [Boolean] :include_group_roles include environment and application roles in each group
  # @return [Boolean]
  describe 'delete_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_person_from_group
  # Remove a person from a group
  # @param gid The id of the group to find
  # @param p_id The id of the person to add/delete
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_members include people in each group
  # @return [Group]
  describe 'delete_person_from_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for find_groups
  # Gets a list of groups.
  # @param id The id of the portfolio to find
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_people include people in each group
  # @option opts [SortOrder] :order how to order the results
  # @option opts [String] :filter What to filter the results by
  # @return [Array<Group>]
  describe 'find_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_group
  # Get group
  # @param gid The id of the group to find
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_members include people in each group
  # @option opts [Boolean] :include_group_roles include environment and application roles in each group
  # @option opts [String] :by_application_id 
  # @return [Group]
  describe 'get_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_superuser_group
  # Gets the superuser group for this organisation. There is no other way to ascertain which org you are dealing with
  # @param id the id of the organisation
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'get_superuser_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_group
  # Update a group
  # @param gid The id of the group to find
  # @param group 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_members include people in each group
  # @option opts [Boolean] :include_group_roles include environment and application roles in each group
  # @option opts [Boolean] :update_members update members, deleting those that are not passed
  # @option opts [Boolean] :update_environment_group_roles update environment group roles, deleting any not passed
  # @option opts [Boolean] :update_application_group_roles update application group roles, deleting any not passed
  # @option opts [String] :application_id if updating the application group roles, and the application id is passed, then the changes are limited to that application
  # @return [Group]
  describe 'update_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
