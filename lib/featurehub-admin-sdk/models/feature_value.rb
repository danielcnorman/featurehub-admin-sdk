=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module FeaturehubAdminSdk
  class FeatureValue
    attr_accessor :id

    attr_accessor :key

    attr_accessor :locked

    # default value if no strategy matches. interpreted by type in parent
    attr_accessor :value_string

    attr_accessor :value_number

    attr_accessor :value_boolean

    attr_accessor :value_json

    # if false or null, this feature will visible on edge. if true, it will not be passed to the client
    attr_accessor :retired

    attr_accessor :rollout_strategy_instances

    # These are custom rollout strategies that only apply to this feature value.
    attr_accessor :rollout_strategies

    # This is list is either provided empty (when publishing) or anemic so the MR will client will understand which shared strategies are attached without having to back-call. If provided then it will mirror rolloutStrategyInstances and only enabled ones will be passed back. The value from the rolloutStrategyInstance will be embedded. This field will _always_ be ignored when being sent back to the server, only rolloutStrategyInstances is used.
    attr_accessor :shared_rollout_strategies

    # There are strategies provided by feature groups (if any)
    attr_accessor :feature_group_strategies

    attr_accessor :environment_id

    # used for optimistic locking
    attr_accessor :version

    attr_accessor :who_updated

    attr_accessor :when_updated

    attr_accessor :what_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'key' => :'key',
        :'locked' => :'locked',
        :'value_string' => :'valueString',
        :'value_number' => :'valueNumber',
        :'value_boolean' => :'valueBoolean',
        :'value_json' => :'valueJson',
        :'retired' => :'retired',
        :'rollout_strategy_instances' => :'rolloutStrategyInstances',
        :'rollout_strategies' => :'rolloutStrategies',
        :'shared_rollout_strategies' => :'sharedRolloutStrategies',
        :'feature_group_strategies' => :'featureGroupStrategies',
        :'environment_id' => :'environmentId',
        :'version' => :'version',
        :'who_updated' => :'whoUpdated',
        :'when_updated' => :'whenUpdated',
        :'what_updated' => :'whatUpdated'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'key' => :'String',
        :'locked' => :'Boolean',
        :'value_string' => :'String',
        :'value_number' => :'Float',
        :'value_boolean' => :'Boolean',
        :'value_json' => :'String',
        :'retired' => :'Boolean',
        :'rollout_strategy_instances' => :'Array<RolloutStrategyInstance>',
        :'rollout_strategies' => :'Array<RolloutStrategy>',
        :'shared_rollout_strategies' => :'Array<RolloutStrategy>',
        :'feature_group_strategies' => :'Array<FeatureGroupFeatureValueStrategy>',
        :'environment_id' => :'String',
        :'version' => :'Integer',
        :'who_updated' => :'Person',
        :'when_updated' => :'Time',
        :'what_updated' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FeaturehubAdminSdk::FeatureValue` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FeaturehubAdminSdk::FeatureValue`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'locked')
        self.locked = attributes[:'locked']
      end

      if attributes.key?(:'value_string')
        self.value_string = attributes[:'value_string']
      end

      if attributes.key?(:'value_number')
        self.value_number = attributes[:'value_number']
      end

      if attributes.key?(:'value_boolean')
        self.value_boolean = attributes[:'value_boolean']
      end

      if attributes.key?(:'value_json')
        self.value_json = attributes[:'value_json']
      end

      if attributes.key?(:'retired')
        self.retired = attributes[:'retired']
      end

      if attributes.key?(:'rollout_strategy_instances')
        if (value = attributes[:'rollout_strategy_instances']).is_a?(Array)
          self.rollout_strategy_instances = value
        end
      end

      if attributes.key?(:'rollout_strategies')
        if (value = attributes[:'rollout_strategies']).is_a?(Array)
          self.rollout_strategies = value
        end
      end

      if attributes.key?(:'shared_rollout_strategies')
        if (value = attributes[:'shared_rollout_strategies']).is_a?(Array)
          self.shared_rollout_strategies = value
        end
      end

      if attributes.key?(:'feature_group_strategies')
        if (value = attributes[:'feature_group_strategies']).is_a?(Array)
          self.feature_group_strategies = value
        end
      end

      if attributes.key?(:'environment_id')
        self.environment_id = attributes[:'environment_id']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'who_updated')
        self.who_updated = attributes[:'who_updated']
      end

      if attributes.key?(:'when_updated')
        self.when_updated = attributes[:'when_updated']
      end

      if attributes.key?(:'what_updated')
        self.what_updated = attributes[:'what_updated']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @key.nil?
        invalid_properties.push('invalid value for "key", key cannot be nil.')
      end

      if @locked.nil?
        invalid_properties.push('invalid value for "locked", locked cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @key.nil?
      return false if @locked.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          key == o.key &&
          locked == o.locked &&
          value_string == o.value_string &&
          value_number == o.value_number &&
          value_boolean == o.value_boolean &&
          value_json == o.value_json &&
          retired == o.retired &&
          rollout_strategy_instances == o.rollout_strategy_instances &&
          rollout_strategies == o.rollout_strategies &&
          shared_rollout_strategies == o.shared_rollout_strategies &&
          feature_group_strategies == o.feature_group_strategies &&
          environment_id == o.environment_id &&
          version == o.version &&
          who_updated == o.who_updated &&
          when_updated == o.when_updated &&
          what_updated == o.what_updated
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, key, locked, value_string, value_number, value_boolean, value_json, retired, rollout_strategy_instances, rollout_strategies, shared_rollout_strategies, feature_group_strategies, environment_id, version, who_updated, when_updated, what_updated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FeaturehubAdminSdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
