=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class AuthServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Change password
    # @param id [String] The id of the person to change password for
    # @param password_update [PasswordUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Person]
    def change_password(id, password_update, opts = {})
      data, _status_code, _headers = change_password_with_http_info(id, password_update, opts)
      data
    end

    # Change password
    # @param id [String] The id of the person to change password for
    # @param password_update [PasswordUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def change_password_with_http_info(id, password_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.change_password ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthServiceApi.change_password"
      end
      # verify the required parameter 'password_update' is set
      if @api_client.config.client_side_validation && password_update.nil?
        fail ArgumentError, "Missing the required parameter 'password_update' when calling AuthServiceApi.change_password"
      end
      # resource path
      local_var_path = '/mr-api/authentication/{id}/changePassword'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(password_update)

      # return_type
      return_type = opts[:debug_return_type] || 'Person'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthServiceApi.change_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#change_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a login URL for this specified provider if it is supported by the server
    # @param provider [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProviderRedirect]
    def get_login_url_for_provider(provider, opts = {})
      data, _status_code, _headers = get_login_url_for_provider_with_http_info(provider, opts)
      data
    end

    # Gets a login URL for this specified provider if it is supported by the server
    # @param provider [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProviderRedirect, Integer, Hash)>] ProviderRedirect data, response status code and response headers
    def get_login_url_for_provider_with_http_info(provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.get_login_url_for_provider ...'
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling AuthServiceApi.get_login_url_for_provider"
      end
      # resource path
      local_var_path = '/mr-api/external-provider/{provider}'.sub('{' + 'provider' + '}', CGI.escape(provider.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProviderRedirect'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthServiceApi.get_login_url_for_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#get_login_url_for_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login to Feature Hub
    # @param user_credentials [UserCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [TokenizedPerson]
    def login(user_credentials, opts = {})
      data, _status_code, _headers = login_with_http_info(user_credentials, opts)
      data
    end

    # Login to Feature Hub
    # @param user_credentials [UserCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenizedPerson, Integer, Hash)>] TokenizedPerson data, response status code and response headers
    def login_with_http_info(user_credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.login ...'
      end
      # verify the required parameter 'user_credentials' is set
      if @api_client.config.client_side_validation && user_credentials.nil?
        fail ArgumentError, "Missing the required parameter 'user_credentials' when calling AuthServiceApi.login"
      end
      # resource path
      local_var_path = '/mr-api/login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_credentials)

      # return_type
      return_type = opts[:debug_return_type] || 'TokenizedPerson'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthServiceApi.login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get person by token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def logout(opts = {})
      logout_with_http_info(opts)
      nil
    end

    # Get person by token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.logout ...'
      end
      # resource path
      local_var_path = '/mr-api/logout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthServiceApi.logout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get person by token
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Person]
    def person_by_token(token, opts = {})
      data, _status_code, _headers = person_by_token_with_http_info(token, opts)
      data
    end

    # Get person by token
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def person_by_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.person_by_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AuthServiceApi.person_by_token"
      end
      # resource path
      local_var_path = '/mr-api/authentication/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Person'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthServiceApi.person_by_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#person_by_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new user
    # @param person_registration_details [PersonRegistrationDetails] 
    # @param [Hash] opts the optional parameters
    # @return [TokenizedPerson]
    def register_person(person_registration_details, opts = {})
      data, _status_code, _headers = register_person_with_http_info(person_registration_details, opts)
      data
    end

    # Create a new user
    # @param person_registration_details [PersonRegistrationDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenizedPerson, Integer, Hash)>] TokenizedPerson data, response status code and response headers
    def register_person_with_http_info(person_registration_details, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.register_person ...'
      end
      # verify the required parameter 'person_registration_details' is set
      if @api_client.config.client_side_validation && person_registration_details.nil?
        fail ArgumentError, "Missing the required parameter 'person_registration_details' when calling AuthServiceApi.register_person"
      end
      # resource path
      local_var_path = '/mr-api/authentication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(person_registration_details)

      # return_type
      return_type = opts[:debug_return_type] || 'TokenizedPerson'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthServiceApi.register_person",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#register_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace temporary password
    # @param id [String] The id of the person to replace temporary password for
    # @param password_reset [PasswordReset] 
    # @param [Hash] opts the optional parameters
    # @return [TokenizedPerson]
    def replace_temp_password(id, password_reset, opts = {})
      data, _status_code, _headers = replace_temp_password_with_http_info(id, password_reset, opts)
      data
    end

    # Replace temporary password
    # @param id [String] The id of the person to replace temporary password for
    # @param password_reset [PasswordReset] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenizedPerson, Integer, Hash)>] TokenizedPerson data, response status code and response headers
    def replace_temp_password_with_http_info(id, password_reset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.replace_temp_password ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthServiceApi.replace_temp_password"
      end
      # verify the required parameter 'password_reset' is set
      if @api_client.config.client_side_validation && password_reset.nil?
        fail ArgumentError, "Missing the required parameter 'password_reset' when calling AuthServiceApi.replace_temp_password"
      end
      # resource path
      local_var_path = '/mr-api/authentication/{id}/replaceTempPassword'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(password_reset)

      # return_type
      return_type = opts[:debug_return_type] || 'TokenizedPerson'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthServiceApi.replace_temp_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#replace_temp_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Allows an administrator to reset a user's expired token so they can login
    # @param email [String] The email address of the person whose expired token to reset
    # @param [Hash] opts the optional parameters
    # @return [RegistrationUrl]
    def reset_expired_token(email, opts = {})
      data, _status_code, _headers = reset_expired_token_with_http_info(email, opts)
      data
    end

    # Allows an administrator to reset a user&#39;s expired token so they can login
    # @param email [String] The email address of the person whose expired token to reset
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationUrl, Integer, Hash)>] RegistrationUrl data, response status code and response headers
    def reset_expired_token_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.reset_expired_token ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AuthServiceApi.reset_expired_token"
      end
      # resource path
      local_var_path = '/mr-api/authentication/{email}/expiredTokenReset'.sub('{' + 'email' + '}', CGI.escape(email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationUrl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthServiceApi.reset_expired_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#reset_expired_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset password
    # @param id [String] The id of the person to reset password for
    # @param password_reset [PasswordReset] 
    # @param [Hash] opts the optional parameters
    # @return [Person]
    def reset_password(id, password_reset, opts = {})
      data, _status_code, _headers = reset_password_with_http_info(id, password_reset, opts)
      data
    end

    # Reset password
    # @param id [String] The id of the person to reset password for
    # @param password_reset [PasswordReset] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def reset_password_with_http_info(id, password_reset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthServiceApi.reset_password ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthServiceApi.reset_password"
      end
      # verify the required parameter 'password_reset' is set
      if @api_client.config.client_side_validation && password_reset.nil?
        fail ArgumentError, "Missing the required parameter 'password_reset' when calling AuthServiceApi.reset_password"
      end
      # resource path
      local_var_path = '/mr-api/authentication/{id}/resetPassword'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(password_reset)

      # return_type
      return_type = opts[:debug_return_type] || 'Person'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthServiceApi.reset_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthServiceApi#reset_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
