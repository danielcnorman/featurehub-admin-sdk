=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class RolloutStrategyServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param app_id [String] The id of the application to find
    # @param rollout_strategy [RolloutStrategy] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [RolloutStrategyInfo]
    def create_rollout_strategy(app_id, rollout_strategy, opts = {})
      data, _status_code, _headers = create_rollout_strategy_with_http_info(app_id, rollout_strategy, opts)
      data
    end

    # @param app_id [String] The id of the application to find
    # @param rollout_strategy [RolloutStrategy] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [Array<(RolloutStrategyInfo, Integer, Hash)>] RolloutStrategyInfo data, response status code and response headers
    def create_rollout_strategy_with_http_info(app_id, rollout_strategy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolloutStrategyServiceApi.create_rollout_strategy ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling RolloutStrategyServiceApi.create_rollout_strategy"
      end
      # verify the required parameter 'rollout_strategy' is set
      if @api_client.config.client_side_validation && rollout_strategy.nil?
        fail ArgumentError, "Missing the required parameter 'rollout_strategy' when calling RolloutStrategyServiceApi.create_rollout_strategy"
      end
      # resource path
      local_var_path = '/mr-api/application/{appId}/rollout-strategy'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeWhoChanged'] = opts[:'include_who_changed'] if !opts[:'include_who_changed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rollout_strategy)

      # return_type
      return_type = opts[:debug_return_type] || 'RolloutStrategyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RolloutStrategyServiceApi.create_rollout_strategy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolloutStrategyServiceApi#create_rollout_strategy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param app_id [String] The id of the application to find
    # @param strategy_id_or_name [String] The id of the strategy or the unique name of it
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [RolloutStrategyInfo]
    def delete_rollout_strategy(app_id, strategy_id_or_name, opts = {})
      data, _status_code, _headers = delete_rollout_strategy_with_http_info(app_id, strategy_id_or_name, opts)
      data
    end

    # @param app_id [String] The id of the application to find
    # @param strategy_id_or_name [String] The id of the strategy or the unique name of it
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [Array<(RolloutStrategyInfo, Integer, Hash)>] RolloutStrategyInfo data, response status code and response headers
    def delete_rollout_strategy_with_http_info(app_id, strategy_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolloutStrategyServiceApi.delete_rollout_strategy ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling RolloutStrategyServiceApi.delete_rollout_strategy"
      end
      # verify the required parameter 'strategy_id_or_name' is set
      if @api_client.config.client_side_validation && strategy_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'strategy_id_or_name' when calling RolloutStrategyServiceApi.delete_rollout_strategy"
      end
      # resource path
      local_var_path = '/mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s)).sub('{' + 'strategyIdOrName' + '}', CGI.escape(strategy_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeWhoChanged'] = opts[:'include_who_changed'] if !opts[:'include_who_changed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RolloutStrategyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RolloutStrategyServiceApi.delete_rollout_strategy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolloutStrategyServiceApi#delete_rollout_strategy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param app_id [String] The id of the application to find
    # @param strategy_id_or_name [String] The id of the strategy or the unique name of it
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [RolloutStrategyInfo]
    def get_rollout_strategy(app_id, strategy_id_or_name, opts = {})
      data, _status_code, _headers = get_rollout_strategy_with_http_info(app_id, strategy_id_or_name, opts)
      data
    end

    # @param app_id [String] The id of the application to find
    # @param strategy_id_or_name [String] The id of the strategy or the unique name of it
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [Array<(RolloutStrategyInfo, Integer, Hash)>] RolloutStrategyInfo data, response status code and response headers
    def get_rollout_strategy_with_http_info(app_id, strategy_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolloutStrategyServiceApi.get_rollout_strategy ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling RolloutStrategyServiceApi.get_rollout_strategy"
      end
      # verify the required parameter 'strategy_id_or_name' is set
      if @api_client.config.client_side_validation && strategy_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'strategy_id_or_name' when calling RolloutStrategyServiceApi.get_rollout_strategy"
      end
      # resource path
      local_var_path = '/mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s)).sub('{' + 'strategyIdOrName' + '}', CGI.escape(strategy_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeWhoChanged'] = opts[:'include_who_changed'] if !opts[:'include_who_changed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RolloutStrategyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RolloutStrategyServiceApi.get_rollout_strategy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolloutStrategyServiceApi#get_rollout_strategy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param app_id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @option opts [Boolean] :include_archived Include archived strategies
    # @return [Array<RolloutStrategyInfo>]
    def list_application_rollout_strategies(app_id, opts = {})
      data, _status_code, _headers = list_application_rollout_strategies_with_http_info(app_id, opts)
      data
    end

    # @param app_id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @option opts [Boolean] :include_archived Include archived strategies
    # @return [Array<(Array<RolloutStrategyInfo>, Integer, Hash)>] Array<RolloutStrategyInfo> data, response status code and response headers
    def list_application_rollout_strategies_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolloutStrategyServiceApi.list_application_rollout_strategies ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling RolloutStrategyServiceApi.list_application_rollout_strategies"
      end
      # resource path
      local_var_path = '/mr-api/application/{appId}/rollout-strategy'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeWhoChanged'] = opts[:'include_who_changed'] if !opts[:'include_who_changed'].nil?
      query_params[:'includeArchived'] = opts[:'include_archived'] if !opts[:'include_archived'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RolloutStrategyInfo>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RolloutStrategyServiceApi.list_application_rollout_strategies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolloutStrategyServiceApi#list_application_rollout_strategies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param app_id [String] The id of the application to find
    # @param strategy_id_or_name [String] The id of the strategy or the unique name of it
    # @param rollout_strategy [RolloutStrategy] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [RolloutStrategyInfo]
    def update_rollout_strategy(app_id, strategy_id_or_name, rollout_strategy, opts = {})
      data, _status_code, _headers = update_rollout_strategy_with_http_info(app_id, strategy_id_or_name, rollout_strategy, opts)
      data
    end

    # @param app_id [String] The id of the application to find
    # @param strategy_id_or_name [String] The id of the strategy or the unique name of it
    # @param rollout_strategy [RolloutStrategy] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_who_changed include who changed
    # @return [Array<(RolloutStrategyInfo, Integer, Hash)>] RolloutStrategyInfo data, response status code and response headers
    def update_rollout_strategy_with_http_info(app_id, strategy_id_or_name, rollout_strategy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolloutStrategyServiceApi.update_rollout_strategy ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling RolloutStrategyServiceApi.update_rollout_strategy"
      end
      # verify the required parameter 'strategy_id_or_name' is set
      if @api_client.config.client_side_validation && strategy_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'strategy_id_or_name' when calling RolloutStrategyServiceApi.update_rollout_strategy"
      end
      # verify the required parameter 'rollout_strategy' is set
      if @api_client.config.client_side_validation && rollout_strategy.nil?
        fail ArgumentError, "Missing the required parameter 'rollout_strategy' when calling RolloutStrategyServiceApi.update_rollout_strategy"
      end
      # resource path
      local_var_path = '/mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s)).sub('{' + 'strategyIdOrName' + '}', CGI.escape(strategy_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeWhoChanged'] = opts[:'include_who_changed'] if !opts[:'include_who_changed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rollout_strategy)

      # return_type
      return_type = opts[:debug_return_type] || 'RolloutStrategyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RolloutStrategyServiceApi.update_rollout_strategy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolloutStrategyServiceApi#update_rollout_strategy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provide server validation responses for this group of rollout strategies
    # @param app_id [String] The id of the application to find
    # @param rollout_strategy_validation_request [RolloutStrategyValidationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RolloutStrategyValidationResponse]
    def validate(app_id, rollout_strategy_validation_request, opts = {})
      data, _status_code, _headers = validate_with_http_info(app_id, rollout_strategy_validation_request, opts)
      data
    end

    # Provide server validation responses for this group of rollout strategies
    # @param app_id [String] The id of the application to find
    # @param rollout_strategy_validation_request [RolloutStrategyValidationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RolloutStrategyValidationResponse, Integer, Hash)>] RolloutStrategyValidationResponse data, response status code and response headers
    def validate_with_http_info(app_id, rollout_strategy_validation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolloutStrategyServiceApi.validate ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling RolloutStrategyServiceApi.validate"
      end
      # verify the required parameter 'rollout_strategy_validation_request' is set
      if @api_client.config.client_side_validation && rollout_strategy_validation_request.nil?
        fail ArgumentError, "Missing the required parameter 'rollout_strategy_validation_request' when calling RolloutStrategyServiceApi.validate"
      end
      # resource path
      local_var_path = '/mr-api/application/{appId}/rollout-strategy-validation'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rollout_strategy_validation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RolloutStrategyValidationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RolloutStrategyServiceApi.validate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolloutStrategyServiceApi#validate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
