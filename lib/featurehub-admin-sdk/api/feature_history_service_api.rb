=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class FeatureHistoryServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets a paginated list of history of feature value changes
    # @param app_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :feature_keys Allows you to search by keys. If featureIds are provided, keys are ignored
    # @option opts [Array<String>] :feature_ids The ids of the features you want, prefer this over keys as keys can change
    # @option opts [Array<Integer>] :versions If only one feature is requested, you can specify the specific versions you want
    # @option opts [Array<String>] :environment_ids Any environments you want the feature keys/ids from
    # @option opts [Integer] :max This is the max to result, limited by server
    # @option opts [Integer] :start_at what position in the results to start at
    # @return [FeatureHistoryList]
    def list_feature_history(app_id, opts = {})
      data, _status_code, _headers = list_feature_history_with_http_info(app_id, opts)
      data
    end

    # Gets a paginated list of history of feature value changes
    # @param app_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :feature_keys Allows you to search by keys. If featureIds are provided, keys are ignored
    # @option opts [Array<String>] :feature_ids The ids of the features you want, prefer this over keys as keys can change
    # @option opts [Array<Integer>] :versions If only one feature is requested, you can specify the specific versions you want
    # @option opts [Array<String>] :environment_ids Any environments you want the feature keys/ids from
    # @option opts [Integer] :max This is the max to result, limited by server
    # @option opts [Integer] :start_at what position in the results to start at
    # @return [Array<(FeatureHistoryList, Integer, Hash)>] FeatureHistoryList data, response status code and response headers
    def list_feature_history_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureHistoryServiceApi.list_feature_history ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling FeatureHistoryServiceApi.list_feature_history"
      end
      # resource path
      local_var_path = '/mr-api/application/{appId}/feature-history'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'featureKeys'] = @api_client.build_collection_param(opts[:'feature_keys'], :multi) if !opts[:'feature_keys'].nil?
      query_params[:'featureIds'] = @api_client.build_collection_param(opts[:'feature_ids'], :multi) if !opts[:'feature_ids'].nil?
      query_params[:'versions'] = @api_client.build_collection_param(opts[:'versions'], :multi) if !opts[:'versions'].nil?
      query_params[:'environmentIds'] = @api_client.build_collection_param(opts[:'environment_ids'], :multi) if !opts[:'environment_ids'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'startAt'] = opts[:'start_at'] if !opts[:'start_at'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureHistoryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureHistoryServiceApi.list_feature_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureHistoryServiceApi#list_feature_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
