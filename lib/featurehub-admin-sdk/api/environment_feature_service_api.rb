=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class EnvironmentFeatureServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a specific feature in this environment.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param feature_value [FeatureValue] 
    # @param [Hash] opts the optional parameters
    # @return [FeatureValue]
    def create_feature_for_environment(eid, key, feature_value, opts = {})
      data, _status_code, _headers = create_feature_for_environment_with_http_info(eid, key, feature_value, opts)
      data
    end

    # Create a specific feature in this environment.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param feature_value [FeatureValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureValue, Integer, Hash)>] FeatureValue data, response status code and response headers
    def create_feature_for_environment_with_http_info(eid, key, feature_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentFeatureServiceApi.create_feature_for_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentFeatureServiceApi.create_feature_for_environment"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling EnvironmentFeatureServiceApi.create_feature_for_environment"
      end
      # verify the required parameter 'feature_value' is set
      if @api_client.config.client_side_validation && feature_value.nil?
        fail ArgumentError, "Missing the required parameter 'feature_value' when calling EnvironmentFeatureServiceApi.create_feature_for_environment"
      end
      # resource path
      local_var_path = '/mr-api/features/{eid}/feature/{key}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(feature_value)

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureValue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentFeatureServiceApi.create_feature_for_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentFeatureServiceApi#create_feature_for_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # No longer supported. Please update to a null value.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_feature_for_environment(eid, key, opts = {})
      delete_feature_for_environment_with_http_info(eid, key, opts)
      nil
    end

    # No longer supported. Please update to a null value.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_feature_for_environment_with_http_info(eid, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentFeatureServiceApi.delete_feature_for_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentFeatureServiceApi.delete_feature_for_environment"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling EnvironmentFeatureServiceApi.delete_feature_for_environment"
      end
      # resource path
      local_var_path = '/mr-api/features/{eid}/feature/{key}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentFeatureServiceApi.delete_feature_for_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentFeatureServiceApi#delete_feature_for_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific feature in this environment.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param [Hash] opts the optional parameters
    # @return [FeatureValue]
    def get_feature_for_environment(eid, key, opts = {})
      data, _status_code, _headers = get_feature_for_environment_with_http_info(eid, key, opts)
      data
    end

    # Update a specific feature in this environment.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureValue, Integer, Hash)>] FeatureValue data, response status code and response headers
    def get_feature_for_environment_with_http_info(eid, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentFeatureServiceApi.get_feature_for_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentFeatureServiceApi.get_feature_for_environment"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling EnvironmentFeatureServiceApi.get_feature_for_environment"
      end
      # resource path
      local_var_path = '/mr-api/features/{eid}/feature/{key}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureValue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentFeatureServiceApi.get_feature_for_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentFeatureServiceApi#get_feature_for_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all features for this environment
    # @param eid [String] The id of the environment to find features or &#39;latest&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_features include the features in the result
    # @option opts [String] :filter Filter the feature names by this filter.
    # @return [EnvironmentFeaturesResult]
    def get_features_for_environment(eid, opts = {})
      data, _status_code, _headers = get_features_for_environment_with_http_info(eid, opts)
      data
    end

    # Get all features for this environment
    # @param eid [String] The id of the environment to find features or &#39;latest&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_features include the features in the result
    # @option opts [String] :filter Filter the feature names by this filter.
    # @return [Array<(EnvironmentFeaturesResult, Integer, Hash)>] EnvironmentFeaturesResult data, response status code and response headers
    def get_features_for_environment_with_http_info(eid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentFeatureServiceApi.get_features_for_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentFeatureServiceApi.get_features_for_environment"
      end
      # resource path
      local_var_path = '/mr-api/features/{eid}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeFeatures'] = opts[:'include_features'] if !opts[:'include_features'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnvironmentFeaturesResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentFeatureServiceApi.get_features_for_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentFeatureServiceApi#get_features_for_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update all features for this environment that are passed. Ignores any other feature values that are not passed.
    # @param eid [String] The id of the environment to find features or &#39;latest&#39;
    # @param feature_value [Array<FeatureValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<FeatureValue>]
    def update_all_features_for_environment(eid, feature_value, opts = {})
      data, _status_code, _headers = update_all_features_for_environment_with_http_info(eid, feature_value, opts)
      data
    end

    # Update all features for this environment that are passed. Ignores any other feature values that are not passed.
    # @param eid [String] The id of the environment to find features or &#39;latest&#39;
    # @param feature_value [Array<FeatureValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FeatureValue>, Integer, Hash)>] Array<FeatureValue> data, response status code and response headers
    def update_all_features_for_environment_with_http_info(eid, feature_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentFeatureServiceApi.update_all_features_for_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentFeatureServiceApi.update_all_features_for_environment"
      end
      # verify the required parameter 'feature_value' is set
      if @api_client.config.client_side_validation && feature_value.nil?
        fail ArgumentError, "Missing the required parameter 'feature_value' when calling EnvironmentFeatureServiceApi.update_all_features_for_environment"
      end
      # resource path
      local_var_path = '/mr-api/features/{eid}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(feature_value)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FeatureValue>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentFeatureServiceApi.update_all_features_for_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentFeatureServiceApi#update_all_features_for_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific feature in this environment.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param feature_value [FeatureValue] 
    # @param [Hash] opts the optional parameters
    # @return [FeatureValue]
    def update_feature_for_environment(eid, key, feature_value, opts = {})
      data, _status_code, _headers = update_feature_for_environment_with_http_info(eid, key, feature_value, opts)
      data
    end

    # Update a specific feature in this environment.
    # @param eid [String] The id of the environment to find features
    # @param key [String] The key of the relevant feature
    # @param feature_value [FeatureValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureValue, Integer, Hash)>] FeatureValue data, response status code and response headers
    def update_feature_for_environment_with_http_info(eid, key, feature_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentFeatureServiceApi.update_feature_for_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentFeatureServiceApi.update_feature_for_environment"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling EnvironmentFeatureServiceApi.update_feature_for_environment"
      end
      # verify the required parameter 'feature_value' is set
      if @api_client.config.client_side_validation && feature_value.nil?
        fail ArgumentError, "Missing the required parameter 'feature_value' when calling EnvironmentFeatureServiceApi.update_feature_for_environment"
      end
      # resource path
      local_var_path = '/mr-api/features/{eid}/feature/{key}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(feature_value)

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureValue'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentFeatureServiceApi.update_feature_for_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentFeatureServiceApi#update_feature_for_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
