=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class PortfolioServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new portfolio
    # @param portfolio [Portfolio] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @return [Portfolio]
    def create_portfolio(portfolio, opts = {})
      data, _status_code, _headers = create_portfolio_with_http_info(portfolio, opts)
      data
    end

    # Create a new portfolio
    # @param portfolio [Portfolio] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def create_portfolio_with_http_info(portfolio, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioServiceApi.create_portfolio ...'
      end
      # verify the required parameter 'portfolio' is set
      if @api_client.config.client_side_validation && portfolio.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio' when calling PortfolioServiceApi.create_portfolio"
      end
      # resource path
      local_var_path = '/mr-api/portfolio'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeGroups'] = opts[:'include_groups'] if !opts[:'include_groups'].nil?
      query_params[:'includeApplications'] = opts[:'include_applications'] if !opts[:'include_applications'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(portfolio)

      # return_type
      return_type = opts[:debug_return_type] || 'Portfolio'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PortfolioServiceApi.create_portfolio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioServiceApi#create_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a portfolio
    # @param id [String] The id of the portfolio to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [Boolean] :include_environments Include the environments inside the applications
    # @return [Boolean]
    def delete_portfolio(id, opts = {})
      data, _status_code, _headers = delete_portfolio_with_http_info(id, opts)
      data
    end

    # Delete a portfolio
    # @param id [String] The id of the portfolio to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [Boolean] :include_environments Include the environments inside the applications
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def delete_portfolio_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioServiceApi.delete_portfolio ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioServiceApi.delete_portfolio"
      end
      # resource path
      local_var_path = '/mr-api/portfolio/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeGroups'] = opts[:'include_groups'] if !opts[:'include_groups'].nil?
      query_params[:'includeApplications'] = opts[:'include_applications'] if !opts[:'include_applications'].nil?
      query_params[:'includeEnvironments'] = opts[:'include_environments'] if !opts[:'include_environments'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PortfolioServiceApi.delete_portfolio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioServiceApi#delete_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of portfolios.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [SortOrder] :order how to order the results
    # @option opts [String] :filter What to filter the results by
    # @option opts [String] :parent_portfolio_id The parent portfolio to search under. If none is provided, use the top level one
    # @return [Array<Portfolio>]
    def find_portfolios(opts = {})
      data, _status_code, _headers = find_portfolios_with_http_info(opts)
      data
    end

    # Gets a list of portfolios.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [SortOrder] :order how to order the results
    # @option opts [String] :filter What to filter the results by
    # @option opts [String] :parent_portfolio_id The parent portfolio to search under. If none is provided, use the top level one
    # @return [Array<(Array<Portfolio>, Integer, Hash)>] Array<Portfolio> data, response status code and response headers
    def find_portfolios_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioServiceApi.find_portfolios ...'
      end
      # resource path
      local_var_path = '/mr-api/portfolio'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeGroups'] = opts[:'include_groups'] if !opts[:'include_groups'].nil?
      query_params[:'includeApplications'] = opts[:'include_applications'] if !opts[:'include_applications'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'parentPortfolioId'] = opts[:'parent_portfolio_id'] if !opts[:'parent_portfolio_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Portfolio>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PortfolioServiceApi.find_portfolios",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioServiceApi#find_portfolios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get portfolio
    # @param id [String] The id of the portfolio to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [Boolean] :include_environments Include the environments inside the applications
    # @return [Portfolio]
    def get_portfolio(id, opts = {})
      data, _status_code, _headers = get_portfolio_with_http_info(id, opts)
      data
    end

    # Get portfolio
    # @param id [String] The id of the portfolio to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [Boolean] :include_environments Include the environments inside the applications
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def get_portfolio_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioServiceApi.get_portfolio ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioServiceApi.get_portfolio"
      end
      # resource path
      local_var_path = '/mr-api/portfolio/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeGroups'] = opts[:'include_groups'] if !opts[:'include_groups'].nil?
      query_params[:'includeApplications'] = opts[:'include_applications'] if !opts[:'include_applications'].nil?
      query_params[:'includeEnvironments'] = opts[:'include_environments'] if !opts[:'include_environments'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Portfolio'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PortfolioServiceApi.get_portfolio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioServiceApi#get_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a portfolio
    # @param id [String] The id of the portfolio to find
    # @param portfolio [Portfolio] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [Boolean] :include_environments Include the environments inside the applications
    # @return [Portfolio]
    def update_portfolio(id, portfolio, opts = {})
      data, _status_code, _headers = update_portfolio_with_http_info(id, portfolio, opts)
      data
    end

    # Update a portfolio
    # @param id [String] The id of the portfolio to find
    # @param portfolio [Portfolio] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_groups Include groups for this this portfolio in results
    # @option opts [Boolean] :include_applications Include applications for this portfolio in results
    # @option opts [Boolean] :include_environments Include the environments inside the applications
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def update_portfolio_with_http_info(id, portfolio, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioServiceApi.update_portfolio ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioServiceApi.update_portfolio"
      end
      # verify the required parameter 'portfolio' is set
      if @api_client.config.client_side_validation && portfolio.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio' when calling PortfolioServiceApi.update_portfolio"
      end
      # resource path
      local_var_path = '/mr-api/portfolio/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeGroups'] = opts[:'include_groups'] if !opts[:'include_groups'].nil?
      query_params[:'includeApplications'] = opts[:'include_applications'] if !opts[:'include_applications'].nil?
      query_params[:'includeEnvironments'] = opts[:'include_environments'] if !opts[:'include_environments'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(portfolio)

      # return_type
      return_type = opts[:debug_return_type] || 'Portfolio'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PortfolioServiceApi.update_portfolio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioServiceApi#update_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
