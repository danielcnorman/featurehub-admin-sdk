=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class WebhookServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets a specific webhook to show its details based on whats allowed
    # @param env_id [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [WebhookDetail]
    def get_webhook_details(env_id, id, opts = {})
      data, _status_code, _headers = get_webhook_details_with_http_info(env_id, id, opts)
      data
    end

    # Gets a specific webhook to show its details based on whats allowed
    # @param env_id [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookDetail, Integer, Hash)>] WebhookDetail data, response status code and response headers
    def get_webhook_details_with_http_info(env_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookServiceApi.get_webhook_details ...'
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling WebhookServiceApi.get_webhook_details"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookServiceApi.get_webhook_details"
      end
      # resource path
      local_var_path = '/mr-api/webhooks/{envId}/{id}'.sub('{' + 'envId' + '}', CGI.escape(env_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookServiceApi.get_webhook_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookServiceApi#get_webhook_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of well known webhook types
    # @param [Hash] opts the optional parameters
    # @return [WebhookTypeDetails]
    def get_webhook_types(opts = {})
      data, _status_code, _headers = get_webhook_types_with_http_info(opts)
      data
    end

    # Gets a list of well known webhook types
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookTypeDetails, Integer, Hash)>] WebhookTypeDetails data, response status code and response headers
    def get_webhook_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookServiceApi.get_webhook_types ...'
      end
      # resource path
      local_var_path = '/mr-api/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookTypeDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhookServiceApi.get_webhook_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookServiceApi#get_webhook_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides a pagination API for listing webhooks for a specific environment
    # @param env_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max where to start
    # @option opts [Integer] :start_at what position in the results to start at
    # @option opts [String] :filter what types of webhooks to look for
    # @return [WebhookSummary]
    def list_webhooks(env_id, opts = {})
      data, _status_code, _headers = list_webhooks_with_http_info(env_id, opts)
      data
    end

    # Provides a pagination API for listing webhooks for a specific environment
    # @param env_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max where to start
    # @option opts [Integer] :start_at what position in the results to start at
    # @option opts [String] :filter what types of webhooks to look for
    # @return [Array<(WebhookSummary, Integer, Hash)>] WebhookSummary data, response status code and response headers
    def list_webhooks_with_http_info(env_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookServiceApi.list_webhooks ...'
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling WebhookServiceApi.list_webhooks"
      end
      # resource path
      local_var_path = '/mr-api/webhooks/{envId}'.sub('{' + 'envId' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'startAt'] = opts[:'start_at'] if !opts[:'start_at'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookServiceApi.list_webhooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookServiceApi#list_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a ping webhook to see if everything is working
    # @param webhook_check [WebhookCheck] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_webhook(webhook_check, opts = {})
      test_webhook_with_http_info(webhook_check, opts)
      nil
    end

    # Send a ping webhook to see if everything is working
    # @param webhook_check [WebhookCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_webhook_with_http_info(webhook_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookServiceApi.test_webhook ...'
      end
      # verify the required parameter 'webhook_check' is set
      if @api_client.config.client_side_validation && webhook_check.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_check' when calling WebhookServiceApi.test_webhook"
      end
      # resource path
      local_var_path = '/mr-api/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(webhook_check)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookServiceApi.test_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookServiceApi#test_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
