=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class FeatureServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # add a new feature to this application, returns all features.
    # @param id [String] The id of the application to find
    # @param feature [Feature] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<Feature>]
    def create_features_for_application(id, feature, opts = {})
      data, _status_code, _headers = create_features_for_application_with_http_info(id, feature, opts)
      data
    end

    # add a new feature to this application, returns all features.
    # @param id [String] The id of the application to find
    # @param feature [Feature] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<(Array<Feature>, Integer, Hash)>] Array<Feature> data, response status code and response headers
    def create_features_for_application_with_http_info(id, feature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.create_features_for_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.create_features_for_application"
      end
      # verify the required parameter 'feature' is set
      if @api_client.config.client_side_validation && feature.nil?
        fail ArgumentError, "Missing the required parameter 'feature' when calling FeatureServiceApi.create_features_for_application"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/features'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeMetaData'] = opts[:'include_meta_data'] if !opts[:'include_meta_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(feature)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Feature>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.create_features_for_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#create_features_for_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates all named features in this application, returns all features.
    # @param id [String] The id of the application to find
    # @param key [String] The named unique key of the associated feature
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<Feature>]
    def delete_feature_for_application(id, key, opts = {})
      data, _status_code, _headers = delete_feature_for_application_with_http_info(id, key, opts)
      data
    end

    # updates all named features in this application, returns all features.
    # @param id [String] The id of the application to find
    # @param key [String] The named unique key of the associated feature
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<(Array<Feature>, Integer, Hash)>] Array<Feature> data, response status code and response headers
    def delete_feature_for_application_with_http_info(id, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.delete_feature_for_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.delete_feature_for_application"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling FeatureServiceApi.delete_feature_for_application"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/features/{key}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeMetaData'] = opts[:'include_meta_data'] if !opts[:'include_meta_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Feature>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.delete_feature_for_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#delete_feature_for_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all environments and features and their values that this user has access to
    # @param id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A filter to apply to the features - partial match of key or description
    # @option opts [Integer] :max The maximum number of features to get for this page
    # @option opts [Integer] :page The page number of the results. 0 indexed.
    # @option opts [Array<FeatureValueType>] :feature_types 
    # @option opts [SortOrder] :sort_order 
    # @return [ApplicationFeatureValues]
    def find_all_feature_and_feature_values_for_environments_by_application(id, opts = {})
      data, _status_code, _headers = find_all_feature_and_feature_values_for_environments_by_application_with_http_info(id, opts)
      data
    end

    # Get a list of all environments and features and their values that this user has access to
    # @param id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A filter to apply to the features - partial match of key or description
    # @option opts [Integer] :max The maximum number of features to get for this page
    # @option opts [Integer] :page The page number of the results. 0 indexed.
    # @option opts [Array<FeatureValueType>] :feature_types 
    # @option opts [SortOrder] :sort_order 
    # @return [Array<(ApplicationFeatureValues, Integer, Hash)>] ApplicationFeatureValues data, response status code and response headers
    def find_all_feature_and_feature_values_for_environments_by_application_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.find_all_feature_and_feature_values_for_environments_by_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.find_all_feature_and_feature_values_for_environments_by_application"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/all-feature-environment'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'featureTypes'] = @api_client.build_collection_param(opts[:'feature_types'], :multi) if !opts[:'feature_types'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationFeatureValues'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.find_all_feature_and_feature_values_for_environments_by_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#find_all_feature_and_feature_values_for_environments_by_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all environments and features and their values that this user has access to
    # @param id [String] The id of the application to find
    # @param key [String] The key of the associated feature
    # @param [Hash] opts the optional parameters
    # @return [Array<FeatureEnvironment>]
    def get_all_feature_values_by_application_for_key(id, key, opts = {})
      data, _status_code, _headers = get_all_feature_values_by_application_for_key_with_http_info(id, key, opts)
      data
    end

    # Get a list of all environments and features and their values that this user has access to
    # @param id [String] The id of the application to find
    # @param key [String] The key of the associated feature
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FeatureEnvironment>, Integer, Hash)>] Array<FeatureEnvironment> data, response status code and response headers
    def get_all_feature_values_by_application_for_key_with_http_info(id, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.get_all_feature_values_by_application_for_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.get_all_feature_values_by_application_for_key"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling FeatureServiceApi.get_all_feature_values_by_application_for_key"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/feature-environments/{key}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FeatureEnvironment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.get_all_feature_values_by_application_for_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#get_all_feature_values_by_application_for_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all features available in this application
    # @param id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<Feature>]
    def get_all_features_for_application(id, opts = {})
      data, _status_code, _headers = get_all_features_for_application_with_http_info(id, opts)
      data
    end

    # get all features available in this application
    # @param id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<(Array<Feature>, Integer, Hash)>] Array<Feature> data, response status code and response headers
    def get_all_features_for_application_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.get_all_features_for_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.get_all_features_for_application"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/features'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeMetaData'] = opts[:'include_meta_data'] if !opts[:'include_meta_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Feature>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.get_all_features_for_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#get_all_features_for_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get an individual feature
    # @param id [String] The id of the application to find
    # @param key [String] The named unique key of the associated feature
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Feature]
    def get_feature_by_key(id, key, opts = {})
      data, _status_code, _headers = get_feature_by_key_with_http_info(id, key, opts)
      data
    end

    # get an individual feature
    # @param id [String] The id of the application to find
    # @param key [String] The named unique key of the associated feature
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<(Feature, Integer, Hash)>] Feature data, response status code and response headers
    def get_feature_by_key_with_http_info(id, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.get_feature_by_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.get_feature_by_key"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling FeatureServiceApi.get_feature_by_key"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/features/{key}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeMetaData'] = opts[:'include_meta_data'] if !opts[:'include_meta_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Feature'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.get_feature_by_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#get_feature_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a list of all environments and features and their values that this user has access to
    # @param id [String] The id of the application to find
    # @param key [String] The key of the associated feature
    # @param feature_value [Array<FeatureValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :remove_values_not_passed The id of the application to find
    # @return [Array<FeatureEnvironment>]
    def update_all_feature_values_by_application_for_key(id, key, feature_value, opts = {})
      data, _status_code, _headers = update_all_feature_values_by_application_for_key_with_http_info(id, key, feature_value, opts)
      data
    end

    # Update a list of all environments and features and their values that this user has access to
    # @param id [String] The id of the application to find
    # @param key [String] The key of the associated feature
    # @param feature_value [Array<FeatureValue>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :remove_values_not_passed The id of the application to find
    # @return [Array<(Array<FeatureEnvironment>, Integer, Hash)>] Array<FeatureEnvironment> data, response status code and response headers
    def update_all_feature_values_by_application_for_key_with_http_info(id, key, feature_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.update_all_feature_values_by_application_for_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.update_all_feature_values_by_application_for_key"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling FeatureServiceApi.update_all_feature_values_by_application_for_key"
      end
      # verify the required parameter 'feature_value' is set
      if @api_client.config.client_side_validation && feature_value.nil?
        fail ArgumentError, "Missing the required parameter 'feature_value' when calling FeatureServiceApi.update_all_feature_values_by_application_for_key"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/feature-environments/{key}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'removeValuesNotPassed'] = opts[:'remove_values_not_passed'] if !opts[:'remove_values_not_passed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(feature_value)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FeatureEnvironment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.update_all_feature_values_by_application_for_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#update_all_feature_values_by_application_for_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates all named features in this application, returns all features.
    # @param id [String] The id of the application to find
    # @param key [String] The named unique key of the associated feature
    # @param feature [Feature] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<Feature>]
    def update_feature_for_application(id, key, feature, opts = {})
      data, _status_code, _headers = update_feature_for_application_with_http_info(id, key, feature, opts)
      data
    end

    # updates all named features in this application, returns all features.
    # @param id [String] The id of the application to find
    # @param key [String] The named unique key of the associated feature
    # @param feature [Feature] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_meta_data Include the metadata in the returned feature objects. Can be large.
    # @return [Array<(Array<Feature>, Integer, Hash)>] Array<Feature> data, response status code and response headers
    def update_feature_for_application_with_http_info(id, key, feature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.update_feature_for_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeatureServiceApi.update_feature_for_application"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling FeatureServiceApi.update_feature_for_application"
      end
      # verify the required parameter 'feature' is set
      if @api_client.config.client_side_validation && feature.nil?
        fail ArgumentError, "Missing the required parameter 'feature' when calling FeatureServiceApi.update_feature_for_application"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/features/{key}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeMetaData'] = opts[:'include_meta_data'] if !opts[:'include_meta_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(feature)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Feature>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.update_feature_for_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#update_feature_for_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
