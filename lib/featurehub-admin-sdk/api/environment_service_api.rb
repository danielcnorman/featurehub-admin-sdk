=begin
#ManagementResourceApi

#This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.

The version of the OpenAPI document: 1.1.11

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module FeaturehubAdminSdk
  class EnvironmentServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new environment
    # @param id [String] The id of the application to find
    # @param environment [Environment] 
    # @param [Hash] opts the optional parameters
    # @return [Environment]
    def create_environment(id, environment, opts = {})
      data, _status_code, _headers = create_environment_with_http_info(id, environment, opts)
      data
    end

    # Create a new environment
    # @param id [String] The id of the application to find
    # @param environment [Environment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def create_environment_with_http_info(id, environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentServiceApi.create_environment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnvironmentServiceApi.create_environment"
      end
      # verify the required parameter 'environment' is set
      if @api_client.config.client_side_validation && environment.nil?
        fail ArgumentError, "Missing the required parameter 'environment' when calling EnvironmentServiceApi.create_environment"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/environment'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(environment)

      # return_type
      return_type = opts[:debug_return_type] || 'Environment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentServiceApi.create_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentServiceApi#create_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an environment
    # @param eid [String] The id of the environment to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @return [Boolean]
    def delete_environment(eid, opts = {})
      data, _status_code, _headers = delete_environment_with_http_info(eid, opts)
      data
    end

    # Delete an environment
    # @param eid [String] The id of the environment to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def delete_environment_with_http_info(eid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentServiceApi.delete_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentServiceApi.delete_environment"
      end
      # resource path
      local_var_path = '/mr-api/environment/{eid}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeAcls'] = opts[:'include_acls'] if !opts[:'include_acls'].nil?
      query_params[:'includeFeatures'] = opts[:'include_features'] if !opts[:'include_features'].nil?
      query_params[:'includeDetails'] = opts[:'include_details'] if !opts[:'include_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentServiceApi.delete_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentServiceApi#delete_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # this api is designed to update the ordering of environments. it will error on circular references or environments that don't exist.
    # @param id [String] The id of the application to find
    # @param environment [Array<Environment>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Environment>]
    def environment_ordering(id, environment, opts = {})
      data, _status_code, _headers = environment_ordering_with_http_info(id, environment, opts)
      data
    end

    # this api is designed to update the ordering of environments. it will error on circular references or environments that don&#39;t exist.
    # @param id [String] The id of the application to find
    # @param environment [Array<Environment>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Environment>, Integer, Hash)>] Array<Environment> data, response status code and response headers
    def environment_ordering_with_http_info(id, environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentServiceApi.environment_ordering ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnvironmentServiceApi.environment_ordering"
      end
      # verify the required parameter 'environment' is set
      if @api_client.config.client_side_validation && environment.nil?
        fail ArgumentError, "Missing the required parameter 'environment' when calling EnvironmentServiceApi.environment_ordering"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/environment-ordering'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(environment)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Environment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentServiceApi.environment_ordering",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentServiceApi#environment_ordering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of environments.
    # @param id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [EnvironmentSortOrder] :order how to order the results
    # @option opts [String] :filter What to filter the results by
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @return [Array<Environment>]
    def find_environments(id, opts = {})
      data, _status_code, _headers = find_environments_with_http_info(id, opts)
      data
    end

    # Gets a list of environments.
    # @param id [String] The id of the application to find
    # @param [Hash] opts the optional parameters
    # @option opts [EnvironmentSortOrder] :order how to order the results
    # @option opts [String] :filter What to filter the results by
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @return [Array<(Array<Environment>, Integer, Hash)>] Array<Environment> data, response status code and response headers
    def find_environments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentServiceApi.find_environments ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnvironmentServiceApi.find_environments"
      end
      # resource path
      local_var_path = '/mr-api/application/{id}/environment'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'includeAcls'] = opts[:'include_acls'] if !opts[:'include_acls'].nil?
      query_params[:'includeFeatures'] = opts[:'include_features'] if !opts[:'include_features'].nil?
      query_params[:'includeDetails'] = opts[:'include_details'] if !opts[:'include_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Environment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentServiceApi.find_environments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentServiceApi#find_environments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get environment
    # @param eid [String] The id of the environment to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @option opts [Boolean] :include_sdk_url include the sdk url
    # @option opts [Boolean] :include_service_accounts Include the service accounts attached to this environment
    # @return [Environment]
    def get_environment(eid, opts = {})
      data, _status_code, _headers = get_environment_with_http_info(eid, opts)
      data
    end

    # Get environment
    # @param eid [String] The id of the environment to find
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @option opts [Boolean] :include_sdk_url include the sdk url
    # @option opts [Boolean] :include_service_accounts Include the service accounts attached to this environment
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def get_environment_with_http_info(eid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentServiceApi.get_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentServiceApi.get_environment"
      end
      # resource path
      local_var_path = '/mr-api/environment/{eid}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeAcls'] = opts[:'include_acls'] if !opts[:'include_acls'].nil?
      query_params[:'includeFeatures'] = opts[:'include_features'] if !opts[:'include_features'].nil?
      query_params[:'includeDetails'] = opts[:'include_details'] if !opts[:'include_details'].nil?
      query_params[:'includeSdkUrl'] = opts[:'include_sdk_url'] if !opts[:'include_sdk_url'].nil?
      query_params[:'includeServiceAccounts'] = opts[:'include_service_accounts'] if !opts[:'include_service_accounts'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Environment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentServiceApi.get_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentServiceApi#get_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an environment. Please use updateEnvironment2 as that has the fields that can actually be updated
    # @param eid [String] The id of the environment to find
    # @param environment [Environment] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @return [Environment]
    def update_environment(eid, environment, opts = {})
      data, _status_code, _headers = update_environment_with_http_info(eid, environment, opts)
      data
    end

    # Update an environment. Please use updateEnvironment2 as that has the fields that can actually be updated
    # @param eid [String] The id of the environment to find
    # @param environment [Environment] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_acls Include the acls attached to this environment
    # @option opts [Boolean] :include_features Include the features attached to this environment
    # @option opts [Boolean] :include_details Include all environment details
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def update_environment_with_http_info(eid, environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentServiceApi.update_environment ...'
      end
      # verify the required parameter 'eid' is set
      if @api_client.config.client_side_validation && eid.nil?
        fail ArgumentError, "Missing the required parameter 'eid' when calling EnvironmentServiceApi.update_environment"
      end
      # verify the required parameter 'environment' is set
      if @api_client.config.client_side_validation && environment.nil?
        fail ArgumentError, "Missing the required parameter 'environment' when calling EnvironmentServiceApi.update_environment"
      end
      # resource path
      local_var_path = '/mr-api/environment/{eid}'.sub('{' + 'eid' + '}', CGI.escape(eid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeAcls'] = opts[:'include_acls'] if !opts[:'include_acls'].nil?
      query_params[:'includeFeatures'] = opts[:'include_features'] if !opts[:'include_features'].nil?
      query_params[:'includeDetails'] = opts[:'include_details'] if !opts[:'include_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(environment)

      # return_type
      return_type = opts[:debug_return_type] || 'Environment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentServiceApi.update_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentServiceApi#update_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
